<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<!--
Check output with <http://tools.ietf.org/tools/idnits/>
-->

<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.35) -->

<!-- give errors regarding ID-nits and DTD validation -->
<?rfc strict="yes" ?>

<!-- control the table of contents (ToC) -->
<!-- generate a ToC -->
<?rfc toc="no"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<?rfc tocdepth="3"?>

<!-- control references -->
<!-- use anchors instead of numbers for refs, i.e, [RFC2119] instead of [1] -->
<?rfc symrefs="yes"?>
<!-- sort the reference entries alphabetically -->
<?rfc sortrefs="no" ?>

<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<!-- do not start each main section on a new page -->
<?rfc compact="yes" ?>
<!-- keep one blank line between list items -->
<?rfc subcompact="no" ?>

<!-- encourage use of "xml2rfc" tool -->
<?rfc rfcprocack="yes" ?>
<!-- end of list of popular I-D processing instructions -->

<rfc category="info" docName="draft-cheshire-dnssd-privacy-considerations-01" ipr="trust200902">

  <front>
    <title abbrev='Private Discovery Threat Considerations'>Private Discovery Threat Considerations</title>
    <author initials='S.' surname='Cheshire' fullname='Stuart Cheshire'>
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <region>California</region>
          <code>95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <date year='2017' month='November' day='13'/>
    <area>Internet</area>
    <workgroup>Internet Engineering Task Force</workgroup>
    <keyword>DNS-Based Service Discovery</keyword>
    <keyword>RFC</keyword>
    <keyword>Request for Comments</keyword>
    <keyword>I-D</keyword>
    <keyword>Internet-Draft</keyword>
    <abstract>
      <t>This document provides a framework for evaluating
      and comparing solutions for privacy-respecting discovery mechanisms.</t>
    </abstract>
  </front>

  <middle>

<?rfc needLines="45" ?>

    <section title="Introduction">

      <t>When AppleTalk was introduced in 1986, privacy concerns were not
      foremost in most people's minds. The fact that a printer was offering
      printing service was not considered a secret, and the fact that a
      computer was seeking printing service was not considered a secret.
      The fact that the computer could discover the printer without
      expert configuration was considered remarkable.</t>

      <t>Thirty years later, the landscape has changed.
      We now have many more network service types,
      and mobile wireless devices offering and consuming those services are common.
      Those mobile wireless devices and the services they offer or use
      often involve sensitive financial or medical data.
      Furthermore, the ubiquity of such mobile wireless devices
      makes them an attractive target for mischievous or outright criminal activity.
      The fact that a person's smartphone is communicating with their implanted glucose
      monitor or insulin pump is not something that should be public information.</t>

      <t>Hence there is now a need for discovery mechanisms that utilize
      privacy-preserving techniques.
      There have been various different efforts to address this, but they
      tend to offer solutions based on assumptions of what privacy aspects
      are important, without articulating what those assumptions are.
      Without knowing the assumptions and design goals of a particular
      proposal it is hard to evaluate whether that proposal meets those goals,
      or indeed whether they are the right goals.</t>

      <t>Without advocating for any particular solution, this document
      presents an overview of the various aspects of device discovery
      and service discovery, and outlines the privacy concerns of each.
      Any given proposal may not address all possible privacy concerns.
      Depending on the scenario, it may not be necessary to address every privacy concern.
      Indeed, it may turn out to be impossible, or at least impractical,
      to address all possible privacy concerns.
      This document provides a framework to help evaluate whether a given
      solution meets the privacy needs of some particular usage scenario.</t>

<?rfc needLines="45" ?>
    </section>

    <section title="Discovery Operations">

      <t>Device discovery and service discovery involve three principal operations:
        <?rfc subcompact="yes" ?>
        <list style='numbers'>
          <t>Offer</t>
          <t>Discover</t>
          <t>Use</t>
        </list>
        <?rfc subcompact="no" ?>
      </t>

      <t>The "Offer" operation is how a device offers a service on the network.
      Typically this involves, using today's terminology,<vspace />
      (a) a "listening" UDP or TCP socket, which accepts incoming packets or connections, and
      (b) a way of advertising to other local and remote devices what kind of service is being offered,
      its name, and other metadata including how to reach it.
      Observe that there are three levels of information in use here: (i) the type of service,
      (ii) the name of the particular instance of that type of service, and
      (iii) the operational details of how to connect to and make use of that particular instance.
      </t>

      <t>The "Discover" operation is how a client device learns what
      service instances are being offered (by local devices, and/or remote devices,
      depending on the discovery mechanism being used).
      Typically a client device knows what kind of service it is seeking,
      and wants to discover named instances of that service.
      The "Discover" operation is linking information level (i) type of service,
      with information level (ii) names of specific instances offering that type of service.
      The "Discover" operation can be viewed as providing a little information (just the name) about many different instances.
      In terms of complexity and efficiency, it's a 1 x n operation, getting one piece of information about n instances.
      </t>

      <t>The "Use" operation is how a client device requests additional information
      (IP address(es), port number, and possibly other metadata),
      and then uses this information to communicate with the service
      instance and make use of the service it offers.
      The "Use" operation is linking information level (ii) specific instance name,
      with information level (iii) detailed information about that individual instance.
      The "Use" operation can be viewed as providing a lot of information
      about one particular instance.
      In terms of complexity and efficiency, it's an m x 1 operation, getting m pieces
      of information about 1 instance, and then proceeding to use that instance.
      </t>

      <t>All three operations, and the three levels of information they use,
      need to be considered from a privacy perspective.</t>

      <t>Note that some discovery mechanisms conflate "Discover" and "Use" into a single operation.
      Instead of requesting a little information about a lot of instances,
      or a lot of information about a single instance,
      they are only able to request everything about everything.
      They replace a 1 x n operation and an m x 1 operation with a combined m x n operation,
      always requesting m pieces of information each about n different instances.
      </t>

<?rfc needLines="45" ?>
    </section>

    <section title="Trust Granularity">

      <t>When we talk about entities trusting other entities, what entities are we talking about?</t>

      <t>Are the entities physical devices, like a smartphone or laptop computer?</t>

      <t>Are the entities human users?
      If a device like a laptop computer has multiple users,
      we should not assume that because one user is authorized to discover certain services
      that means that all other users of that laptop are also authorized to discover those services.
      </t>

      <t>Are the entities software applications?
      If a device like a smartphone has multiple apps installed,
      we should not assume that because one app is authorized to discover certain services
      that means that all other apps on that smartphone are also authorized to discover those services.
      For example, just because a medical app on a smartphone is authorized to discover
      and communicate with the user's medical devices such as an implanted insulin monitor,
      that doesn't mean that social network apps or games on that same smartphone are also
      authorized to discover and communicate with those medical devices.
      </t>

      <t>Note that services may also be restricted to certain policies that identify single
      devices, users, or groups of users. An entity may thus vary in granularity from a specific
      device for a single user, to a range of devices for a group of users belonging to the same
      policy.</t>

      <t>Moreover, even when the text above talks about a user or app being "authorized" we're
      not talking about authorization controls being enforced by the laptop or smartphone.
      Controls enforced by the laptop or smartphone operating system are
      appropriate and have their place, but the kind of authorization controls
      we're talking about here are enforced by the entity being discovered.
      When the entity being discovered receives a query from an authorized source,
      it answers the query.
      When the entity being discovered receives a query from an unauthorized source,
      it does not answer the query.
      The important question is the granularity of the "source" referred to --
      is it a physical device, a user, or an app?
      (This analysis presupposes that the host operating system on the
      device has sufficient memory protection and access controls to protect
      one user's secret key material from being accessed and abused by another user, or
      one app's secret key material from being accessed and abused by another app.
      For a device without such protection, only the per-device granularity of
      trust is applicable.)
      </t>

<?rfc needLines="45" ?>
    </section>

    <section title="Desirable Security Properties">

      <t>For each of the operations and information levels described above,
      we need to consider what threats we are concerned about.
        <list style="hanging">

          <t hangText="Authenticity, Integrity &amp; Freshness"><vspace />
          Can we trust the information we receive?
          Has it been modified in flight by an adversary?
          Do we trust the source of the information?
          Is the source of information fresh, i.e., not replayed?</t>

          <t hangText="Confidentiality"><vspace />
          Who can read the information sent in messages?
          Ideally this should only be the appropriate trusted parties, but
          it can be hard to define who "the appropriate trusted parties" are.
          The "Discover" operation in particular is often used to discover
          new entities that the device did not previously know about.
          It may be tricky to work out how a device can have an established trust
          relationship with a new entity it has never previously communicated with.
          </t>

          <t hangText="Anonymity &amp; Privacy"><vspace />
          Does the information exchange reveal the identity of either participant?
          In many instances, identities are safe against passive attacks, yet not
          against active attackers. Ideally, mutual identity privacy is preserved.
          In this context "identity" can mean things like the name, email address,
          or phone number of the human user.
          It could mean things like the hostname or MAC address of the device.
          Even when information is authenticated and confidential,
          there can be unexpected sources of information leakage.
          For example, if suitable precautions are not taken, the source
          MAC address in data packets can reveal the identity of the device
          manufacturer, which can yield clues about the nature of the device.
          </t>

          <t hangText="Resistance to Dictionary Attacks"><vspace />
          It can be tempting to use simple one-way hash functions to obscure
          sensitive identifiers.
          This transforms a sensitive unique identifier such as an email address
          into a scrambled (but still unique) identifier.
          Unfortunately simple solutions may be vulnerable to offline
          dictionary attacks.
          Given a scrambled unique identifier, it may be possible to do a brute-force attack,
          trying billions of known and speculative email addresses until a match is found.</t>

          <t hangText="Resistance to Tracking"><vspace />
          In today's world, we have to be sensitive to any
          unchanging unique identifier, no matter how thoroughly and
          irreversibly scrambled it may be.
          Even though an attacker may not be able to divine the origin
          of a scrambled unique identifier, the unchanging unique identifier
          may still be correlated with other things.
          If a given unchanging unique identifier appears on a cafe network
          every morning when a certain person comes in to get coffee,
          then with some certainty that unchanging unique identifier can be
          associated with that person, and used to track their movements
          around the city for the rest of their workday.
          Consequently, in cases where this threat is a concern, all cleartext
          identifiers used on the network need to be rotated according to some policy,
          so that a given identifier is not reused for too long or in different locations.
          These changing identifiers can be decoded by trusted entities,
          but are meaningless to anyone else.</t>

          <t hangText="Resistance to Linkability"><vspace />
          Is it possible to link or correlate exchanges across discovery operations?
          For example, do Discovery messages reveal information
          about future Use messages, or vice versa?
          This can be done via sender MAC address, for example.
          An adversary can use linkability information to de-anonymize service users
          or providers, even in the event that, individually, no information leaks from
          any particular message alone (e.g., because it’s encrypted in transit).
          For example, even if persistent identifiers are rotated periodically,
          if all identifiers are not rotated in unison then the overlap period can be
          used to track the user across identifier rotations.</t>

          <t hangText="Resistance to Denial-of-Service Attack"><vspace />
          In any protocol where the receiver of messages has to perform cryptographic
          operations on those messages, there is a risk of a brute-force flooding
          attack causing the receiver to expend excessive amounts of CPU time
          (and battery power) just processing and discarding those messages.</t>

          <t hangText="Resistance to Sender Impersonation"><vspace />
          Sender impersonation is an attack wherein messages such as service offers are forged 
          by entities who do not possess the corresponding secret key material. These attacks
          may be used to learn the identity of a communicating party, actively or passively.</t>

        </list>
      </t>

<?rfc needLines="45" ?>
    </section>

    <section title="Other Operational Considerations">

      <section title="Power Management">

        <t>Many modern devices, especially battery-powered devices,
        use power management techniques to conserve energy.
        One such technique is for a device to transfer information about itself
        to a proxy, which will act on behalf of the device for some functions,
        while the device itself goes to sleep to reduce power consumption.
        When the proxy determines that some action is required which only
        the device itself can perform, the proxy may have some way
        (such as Ethernet "Magic Packet") to wake the device.</t>

        <t>In many cases, the device may not trust the network proxy
        sufficiently to share all its confidential key material with the proxy.
        This poses challenges for combining private discovery
        that relies on per-query cryptographic operations,
        with energy-saving techniques that rely on having (somewhat untrusted)
        network proxies answer queries on behalf of sleeping devices.</t>

      </section>

      <section title="Protocol Efficiency">

        <t>Creating a discovery protocol that has the desired security
        properties may result in a design that is not efficient.
        To perform the necessary operations the protocol may
        need to send and receive a large number of network packets.
        This may consume an unreasonable amount of network capacity
        (particularly problematic when it's shared wireless spectrum),
        cause an unnecessary level of power consumption
        (particularly problematic on battery devices)
        and may result in the discovery process being slow.</t>

        <t>It is a difficult challenge to design a discovery protocol that has the
        property of obscuring the details of what it is doing from unauthorized
        observers, while also managing to do that quickly and efficiently.</t>

      </section>

      <section title="Secure Initialization and Trust Models">

        <t>One of the challenges implicit in the preceding discussions is
        that whenever we discuss "trusted entities" versus "untrusted entities",
        there needs to be some way that trust is initially established,
        to convert an "untrusted entity" into a "trusted entity".</t>

        <t>One way to establish trust between two entities is
        to trust a third party to make that determination for us.
        For example, the X.509 certificates used by TLS and HTTPS web browsing
        are based on the model of trusting a third party to tell us who to trust.
        There are some difficulties in using this model for establishing
        trust for service discovery uses.
        If we want to print our tax returns or medical documents on "our"
        printer, then we need to know which printer on the network we can
        trust be be "our" printer.
        All of the printers we discover on the network may be legitimate
        printers made by legitimate printer manufacturers, but not all of
        them are "our" printer. A third-party certificate authority cannot
        tell us which one of the printers is ours.</t>

        <t>Another common way to establish a trust relationship is
        Trust On First Use (TOFU), as used by ssh.
        The first usage is a Leap Of Faith, but after that public keys
        are exchanged and at least we can confirm that subsequent
        communications are with the same entity.
        In today's world, where there may be attackers present even at that
        first use, it would be preferable to be able to establish a trust relationship
        without requiring an initial Leap Of Faith.</t>

        <t>Techniques now exist for securely establishing a trust relationship
        without requiring an initial Leap Of Faith.
        Trust can be established securely using a short passphrase or PIN with
        cryptographic algorithms such as
        <xref target="RFC5054">Secure Remote Password (SRP)</xref>
        or a Password Authenticated Key Exchange like
        <xref target="RFC8236">J-PAKE</xref>
        using a
        <xref target="RFC8235">Schnorr Non-interactive Zero-Knowledge Proof</xref>.
        </t>

        <t>Such techniques require a user to enter the correct passphrase or PIN
        in order for the cryptographic algorithms to establish working communication.
        This avoids the human tendency to simply press the "OK" button when asked
        if they want to do something on their electronic device.
        It removes the human fallibility element from the equation,
        and avoids the human users inadvertently sabotaging their own security.</t>

        <t>Using these techniques, if a user tries to print their tax return
        on a printer they’ve never used before (even though the name looks right)
        they’ll be prompted to enter a pairing PIN, and the user
        *cannot* ignore that warning. They can’t just press an “OK” button.
        They have to walk to the printer and read the displayed PIN and enter it.
        And if the intended printer is not displaying a pairing PIN, or is displaying
        a different pairing PIN, that means the user may be being spoofed,
        and the connection will not succeed, and the failure will not reveal
        any secret information to the attacker.
        As much as the human desires to "just give me an OK button to make it print"
        (and the attacker desires them to click that OK button too)
        the cryptographic algorithms do not give the user the ability to opt
        out of the security, and consequently do not give the attacker
        any way to persuade the user to opt out of the security protections.</t>

      </section>

      <section title="External Dependencies">
        <t>Trust establishment may depend on external, and optionally online, parties. 
        Systems which have such a dependency may be attacked by interfering with communication 
        to external dependencies. Where possible, such dependencies should be minimized. 
        Local trust models are best for secure initialization in the presence of active attackers.</t>
      </section>

<?rfc needLines="45" ?>
    </section>

    <section title="Implementation Survey">

      <section title="DNS-SD Privacy Extensions">
        <t>Huitema et al. <xref target="I-D.huitema-dnssd-privacy"></xref> decompose private service discovery into two stages: (1) identify specific peers offering private services, and (2) issue unicast DNS-SD queries to those hosts after connecting over TLS using a previously agreed upon pre-shared key (PSK), or pairing key. Any out-of-band pairing mechanism will suffice for PSK establishment, though the authors specifically mention <xref target="I-D.ietf-dnssd-pairing"></xref> as the pairing mechanism. Step (1) is done by broadcasting “private instance names” to local peers, using service-specific pairing keys. A private instance name N’ for some service with name N is composed of a unique nonce r and commitment to r using N_k. Commitments are constructed by hashing N_k with the nonce. Only owners of N_k may verify its correctness and, upon doing so, answer as needed. The draft recommends randomizing hostnames in SRV responses to minimize likability to specific hosts. Note that this does not prevent fingerprinting and tracking using that hostname.</t>

        <t>After discovering its peers, a node will directly connect to each device using TLS, authenticated with a PSK derived from each associated pairing key, and issue DNS-SD queries per usual. DNS messages are formulated as per <xref target="RFC7858"></xref>.</t>

        <t>As an optimization, the authors recommend that each nonce be deterministically derived based on time so that commitment proofs may be precomputed asynchronously. This avoids O(N*M) computation, where N is the number of nodes in a local network and M is the number of per-node pairings.</t>

        <t>
          This system has the following properties:
          <list style='numbers'>
            <t>Symmetric work load</t>
            <t>No unlinkability</t>
          </list>
        </t>
      </section>

      <section title="Private IoT">
        <t>Boneh et al. <xref target="Wu16"></xref> developed an approach for private service discovery that reduces to private mutual  authentication. Moreover, it should be infeasible for any adversary to forge advertisements or impersonate anyone else on the network. Specifically, service discoverers only wish to reveal their identity to services they trust, and vice versa. Existing protocols such as TLS, IKE, and <xref target="SIGMA"></xref> require that one side reveal its identity first. Their approach first allocates, via some policy manager, key pairs associated with human-readable policy names. For example, user Alice might have a key pair associated with the names /Alice, /Alice/Family, and /Alice/Device. Her key is bound to each of these names. Authentication policies (and trust models) are then expressed as policy prefix patterns, e.g., /Alice/*. Broadcast messages are encrypted to policies. For example, Alice might encrypt a message m to the policy /Bob/*. Only Bob, who owns a private key bound to, e.g., /Bob/Devices, can decrypt m. (This procedure uses a form of identity-based encryption called prefix-based encryption. Readers are referred to <xref target="Wu16"></xref> for a thorough description.)</t>

        <t>Using prefix- and policy-based encryption, service discovery is decomposed into two steps: (1) service announcement and (2) key exchange, similar to <xref target="I-D.huitema-dnssd-privacy"></xref>. Announcements carry service identities, ephemeral key shares, and a signature, all encrypted under the service’s desired policy prefix, e.g., /Alice/Family/*. Upon receipt of an announcement, clients with matching policy private keys can decrypt the announcement and use the ephemeral key share to perform an Authenticated Diffie Hellman key exchange with the service. Upon completion, the derived shared secret may be used for any further communication, e.g., DNS-SD queries, if needed.</t>

        <t>
          This system has the following properties:
          <list style='numbers'>
            <t>Mutual identity privacy</t>
            <t>Asymmetric work load (computation on the order of advertisements)</t>
            <t>Client identity policy, cleartext server policy </t>
            <t>No unlinkability</t>
          </list>
        </t>
      </section>

    </section>
  </middle>

  <back>
    <references title="Informative References">
      <?rfc include="reference.RFC.5054" ?>
      <?rfc include="reference.RFC.7858" ?>
      <?rfc include="reference.RFC.8235" ?>
      <?rfc include="reference.RFC.8236" ?>

      <reference anchor="I-D.huitema-dnssd-privacy" target="https://tools.ietf.org/html/draft-ietf-dnssd-privacy-03">
        <front>
          <title>Privacy Extensions for DNS-SD</title>
          <author initials='C.' surname='Huitema' fullname='Christian Huitema'>
            <organization>Private Octopus Inc.</organization>
          </author>
          <author initials='D.' surname='Kaiser' fullname='Daniel Kaiser'>
            <organization>University of Konstanz</organization>
          </author>
          <date year="2017"/>
        </front>
      </reference>

      <reference anchor="I-D.ietf-dnssd-pairing" target="https://tools.ietf.org/html/draft-ietf-dnssd-pairing-03">
        <front>
          <title>Device Pairing Using Short Authentication Strings</title>
          <author initials='C.' surname='Huitema' fullname='Christian Huitema'>
            <organization>Private Octopus Inc.</organization>
          </author>
          <author initials='D.' surname='Kaiser' fullname='Daniel Kaiser'>
            <organization>University of Konstanz</organization>
          </author>
          <date year="2017"/>
        </front>
      </reference>

      <reference anchor="Wu16" target="https://arxiv.org/pdf/1604.06959.pdf%22">
        <front>
          <title>Privacy, discovery, and authentication for the internet of things</title>
          <author initials='D.' surname='Wu' fullname='David Wu'>
            <organization>Stanford University</organization>
          </author>
          <author initials='A.' surname='Taly' fullname='Ankur Taly'>
            <organization>Google</organization>
          </author>
          <author initials='A.' surname='Shankar' fullname='Asim Shankar'>
            <organization>Google</organization>
          </author>
          <author initials='D.' surname='Boneh' fullname='Dan Boneh'>
            <organization>Stanford University</organization>
          </author>
          <date year="2016"/>
        </front>
      </reference>

      <reference anchor="SIGMA" target="http://link.springer.com/content/pdf/10.1007/978-3-540-45146-4_24.pdf">
        <front>
          <title>SIGMA: The 'SIGn-and-MAc'approach to authenticated Diffie-Hellman and its use in the IKE protocols</title>
          <author initials='H.' surname='Krawczyk' fullname='Hugo Krawczyk'>
            <organization>EE Department, Technion, Haifa, Israel, and IBM T.J. Watson Research Center</organization>
          </author>
          <date year="2003"/>
        </front>
      </reference>
    </references>
  </back>
</rfc>
